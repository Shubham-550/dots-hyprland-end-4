# You can put your preferred keybinds here
# https://wiki.hyprland.org/Configuring/Binds/

# Super KEY
$mainMod = Super

$scripts	    = ~/.config/hypr/scripts
$electron-flags	= --enable-features=UseOzonePlatform --ozone-platform=wayland

#!
##! Applications
bind = $mainMod,				X,			exec, kitty													# Terminal
bind = $mainMod,				B,			exec, librewolf												# Browser
bind = $mainMod Shift,			B,			exec, librewolf --private-window							# Browser
bind = $mainMod Ctrl,			B,			exec, brave --disable-gpu-compositing						# --enable-features=UseOzonePlatform --ozone-platform=wayland --disable-features=WaylandFractionalScaleV1
bind = $mainMod Ctrl Shift,		B,			exec, brave --incognito --new-window google.in				# --enable-features=UseOzonePlatform --ozone-platform=wayland --disable-features=WaylandFractionalScaleV1
bind = $mainMod Shift,			Escape,		exec, missioncenter											# missioncenter
bind = $mainMod Shift,			Escape,		exec, kitty -e btop --utf-force									# missioncenter
bind = $mainMod,				E,			exec, dolphin												# File Manager
bind = $mainMod,				C,			exec, vscodium												# Editor
bind = $mainMod,				W,			exec, stremio												# stremio
bind = $mainMod,				O,			exec, okular												# okular
bind = $mainMod Shift,			O,			exec, obsidian												# obsidian
bind = $mainMod Shift,			W,			exec, mpv --force-window --idle								# mpv
bind = $mainMod,				D,			exec, jdownloader											# jdownloader
bind = $mainMod Ctrl,			P,			exec, pavucontrol -t 3										# pavucontrol (volume mixer)
bind = $mainMod Ctrl,			Space,		exec, pkill anyrun || anyrun								# Toggle fallback launcher: anyrun
bind = $mainMod Alt,			Space,		exec, pkill anyrun || fuzzel								# Toggle fallback launcher: fuzzel
bind = $mainMod,				Y,			exec, scrcpy -d												# scrcpy
bind = $mainMod Alt,			Y,			exec, scrcpy --tcpip=192.168.1.102:5555						# scrcpy
bind = $mainMod,				I,			exec, QT_QPA_PLATFORM=xcb freecad							# FreeCad
bind = $mainMod Shift,			I,			exec, XDG_CURRENT_DESKTOP="gnome" gnome-control-center		# GNOME Settings
bind = $mainMod Shift,			X,			exec, [workspace special silent; float; size 100% 50%; move onscreen 0% 100%] kitty
bind = $mainMod Shift,          G,          exec, obs --disable-missing-files-check --disable-shutdown-check --startrecording 
bind = $mainMod,				F1,			exec, $scripts/gamemode.sh
bind = $mainMod,				F2,			exec, $scripts/no_gaps.sh

#!	
##! Window management	
bind = $mainMod,				Q,			killactive								# Close window
bind = $mainMod Ctrl Shift,		Q,			exec, hyprctl kill						# Pick and kill a window
bind = $mainMod Shift,			F,			fullscreen, 0							# Open window in full screen mode
bind = $mainMod,				F,			fullscreen, 1							# Maximize
bind = Alt,						F,			fullscreenstate, 0 2					# toggles the focused window's internal fullscreen state without Altering the geometry
bind = $mainMod Shift,			V,			exec, $scripts/toggleallfloat.sh	# Toggle all float windows
bind = $mainMod,				V,			togglefloating							# Toggle floating
bind = $mainMod,				A,			togglefloating							# Toggle floating
bind = $mainMod,				A,			pin										# pins a window (i.e. show it on all workspaces) note: floating only
bind = $mainMod Shift,			A,			pin										# pins a window
bind = $mainMod,				A,			resizeactive, exact 25% 25%				# 
bind = $mainMod,				A,			moveactive, exact 73% 72%				# 
bind = $mainMod,				P,			pseudo
bind = $mainMod,				backslash,	togglesplit								# Toggle split

# move focus
bind = $mainMod Alt,			left,		movefocus,	l
bind = $mainMod Alt,			right,		movefocus,	r
bind = $mainMod Alt,			up,			movefocus,	u
bind = $mainMod Alt,			down,		movefocus,	d

bind = $mainMod Alt,			h,			movefocus,	l
bind = $mainMod Alt,			l,			movefocus,	r
bind = $mainMod Alt,			k,			movefocus,	u
bind = $mainMod Alt,			j,			movefocus,	d

bind = $mainMod Alt,			mouse_up,	cyclenext,	next
bind = $mainMod Alt,			mouse_down,	cyclenext,	prev

binde = $mainMod,				up,			focusmonitor,	+1
binde = $mainMod,				K,			focusmonitor,	+1

# move window
binde = $mainMod Shift Alt,		left,		movewindow,	l
binde = $mainMod Shift Alt,		right,		movewindow,	r
binde = $mainMod Shift Alt,		up,			movewindow,	u
binde = $mainMod Shift Alt,		down,		movewindow,	d

binde = $mainMod Shift Alt,		h,			movewindow,	l
binde = $mainMod Shift Alt,		l,			movewindow,	r
binde = $mainMod Shift Alt,		k,			movewindow,	u
binde = $mainMod Shift Alt,		j,			movewindow,	d

bindm = $mainMod,				mouse:272,	movewindow
bindm = $mainMod Ctrl,			mouse:272,	movewindow
bindm = $mainMod,				mouse:273,	resizewindow		# Resize without respecting aspect ratio
bindm = $mainMod Ctrl,			mouse:273,	resizewindow 1		# Resize respecting aspect ratio

# resize window
binde = $mainMod Ctrl Shift,	left,		resizeactive, -40 0
binde = $mainMod Ctrl Shift,	right,		resizeactive, 40 0
binde = $mainMod Ctrl Shift,	up,			resizeactive, 0 -40
binde = $mainMod Ctrl Shift,	down,		resizeactive, 0 40

binde = $mainMod Ctrl Shift,	h,			resizeactive, -40 0
binde = $mainMod Ctrl Shift,	l,			resizeactive, 40 0
binde = $mainMod Ctrl Shift,	k,			resizeactive, 0 -40
binde = $mainMod Ctrl Shift,	j,			resizeactive, 0 40

# Tabbed	 
bind = $mainMod,				G,			togglegroup				#toggles the current active window into a group	
bind = Alt,						Tab,		changegroupactive		# switches to the next window in a group
bind = $mainMod Shift,			G,			moveoutofgroup			# Moves the active window out of a group. No-op if not in a group
bind = Alt,						mouse_up,	changegroupactive, f	# switches forward to the next window in a group
bind = Alt,						mouse_down,	changegroupactive, b	# switches backward to the next window in a group

#!
##! Actions
# bind = $mainMod,			R,			exec, ags -q; ags												# Reload ags
# bind = $mainMod Shift,		M,			exec, wlogout												# Start wlogout
# bind = $mainMod,			L,			exec, hyprlock													# Open screenlock
bind = $mainMod Alt,		W,			exec, waypaper													# Open wallpaper selector
bind = $mainMod,			Space,		exec, rofi -show drun -replace -i								# Open application launcher
# bind = $mainMod Shift,		W,			exec, waypaper --random										# Change the wallpaper
bind = $mainMod Ctrl,		T,			exec, ~/.config/ags/scripts/color_generation/switchwall.sh		# Change wallpaper
bind = SHIFT, Space, sendshortcut, SHIFT, underscore, activewindow

# Screenshot, Record, OCR, Color picker, Clipboard history
bind = $mainMod,			T,			exec, pkill fuzzel || cliphist list | fuzzel --no-fuzzy --dmenu | cliphist decode | wl-copy	# Clipboard history >> clipboard
bind = $mainMod,			Period,		exec, pkill fuzzel || ~/.local/bin/fuzzel-emoji												# Pick emoji >> clipboard
# bind = $mainMod Shift,		S,			exec, ~/.config/ags/scripts/grimblast.sh --freeze copy area									# Screen snip
# bind = $mainMod Shift Alt,	S,			exec, grim -g "$(slurp)" - | swappy -f -													# Screen snip >> edit

# OCR
bind = $mainMod Shift,		T,			exec,grim -g "$(slurp $SLURP_ARGS)" "tmp.png" && tesseract -l eng "tmp.png" - | wl-copy && rm "tmp.png"	# Screen snip to text >> clipboard

# Color picker
bind = $mainMod Shift,		C,			exec, hyprpicker -a	# Pick color (Hex) >> clipboard

# Fullscreen screenshot
bind = $mainMod Alt,		PRINT,		exec, $scripts/screenshot.sh --all				# Take a screenshot
bind = $mainMod Shift,		PRINT,		exec, $scripts/screenshot.sh					# Screenshot
bind = $mainMod Ctrl,		PRINT,		exec, $scripts/screenshot.sh --window			# Window screenshot
bind = $mainMod,			PRINT,		exec, $scripts/screenshot.sh --active			# Active screen screenshot

bind = $mainMod Alt,		S,			exec, $scripts/screenshot.sh --all				# Take a screenshot
bind = $mainMod Shift,		S,			exec, $scripts/screenshot.sh					# Screenshot
bind = $mainMod Ctrl,		S,			exec, $scripts/screenshot.sh --window			# Window screenshot
bind = $mainMod,			S,			exec, $scripts/screenshot.sh --active			# Active screen screenshot

# Recording stuff
# bind = $mainMod Alt,		R,			exec, ~/.config/ags/scripts/record-script.sh	# Record region (no sound)
# bind = Ctrl Alt,			R,			exec, ~/.config/ags/scripts/record-script.sh --fullscreen	# [hidden] Record screen (no sound)
# bind = $mainMod Shift Alt,	R,			exec, ~/.config/ags/scripts/record-script.sh --fullscreen-sound	# Record screen (with sound)
bind = $mainMod Shift Alt,	R,			exec, $scripts/screen_record.sh toggle

##! Session
bind	= $mainMod Ctrl,			apostrophe,	exec, agsv1 run-js 'lock.lock()'	# [hidden]
bind	= $mainMod,					apostrophe,	exec, loginctl lock-session	# Lock
bind	= $mainMod Shift,			apostrophe,	exec, loginctl lock-session	# [hidden]
bindl	= $mainMod Shift,			apostrophe,	exec, sleep 0.1 && systemctl suspend || loginctl suspend	# Suspend system
bind	= $mainMod Ctrl Shift Alt,	Delete,		exec, systemctl poweroff || loginctl poweroff	# [hidden] Power off

#!
##! Workspace navigation

# Switch workspace
bind	= $mainMod,			mouse_down, workspace, m-1			# Open next workspace
bind	= $mainMod,			mouse_up,	workspace, m+1			# Open previous workspace

binde	= $mainMod,			right,		workspace, m+1
binde	= $mainMod,			left,		workspace, m-1
binde	= $mainMod,			down,		workspace, emptym		# Switch to empty workspace

binde	= $mainMod,			l,			workspace, m+1
binde	= $mainMod,			h,			workspace, m-1
binde	= $mainMod,			j,			workspace, emptym		# Switch to empty workspace

bind	= $mainMod Ctrl,	mouse_up,	workspace, +1
bind	= $mainMod Ctrl,	mouse_down, workspace, -1

binde	= $mainMod Ctrl,	Left,		workspace, -1
binde	= $mainMod Ctrl,	Right,		workspace, +1

binde	= $mainMod Ctrl,	h,			workspace, -1
binde	= $mainMod Ctrl,	l,			workspace, +1

binde	= $mainMod Alt,		Z,			workspace, r-10
binde	= $mainMod Alt,		X,			workspace, r+10

binde	= $mainMod Ctrl,	up,			focusmonitor, +1		# cycle focus monitor
binde	= $mainMod Ctrl,	down,		workspace, emptym		# Switch to empty workspace

binde	= $mainMod Ctrl,	k,			focusmonitor, +1		# cycle focus monitor
binde	= $mainMod Ctrl,	j,			workspace, emptym		# Switch to empty workspace

binde	= $mainMod Shift,	Tab,		workspace, previous

# Special workspace
bind = $mainMod,		grave, togglespecialworkspace
bind = $mainMod Shift,	grave, movetoworkspacesilent, special


# bind = $mainMod, 1, workspace, 1								# Switch workspace

# bind = $mainMod Shift, 1, movetoworkspacesilent, 1				# Move window to workspace

# Move all windows to workspace $mainMod + Ctrl + [0-9]
bind = $mainMod Ctrl,	1, exec, $scripts/moveTo.sh 1
bind = $mainMod Ctrl,	2, exec, $scripts/moveTo.sh 2
bind = $mainMod Ctrl,	3, exec, $scripts/moveTo.sh 3
bind = $mainMod Ctrl,	4, exec, $scripts/moveTo.sh 4
bind = $mainMod Ctrl,	5, exec, $scripts/moveTo.sh 5
bind = $mainMod Ctrl,	6, exec, $scripts/moveTo.sh 6
bind = $mainMod Ctrl,	7, exec, $scripts/moveTo.sh 7
bind = $mainMod Ctrl,	8, exec, $scripts/moveTo.sh 8
bind = $mainMod Ctrl,	9, exec, $scripts/moveTo.sh 9
bind = $mainMod Ctrl,	0, exec, $scripts/moveTo.sh 10

#/# bind = $mainMod, Hash,,	# Focus workspace	# (1, 2, 3, 4, ...)
bind = $mainMod,		1, exec, $scripts/workspace_action.sh workspace 1
bind = $mainMod,		2, exec, $scripts/workspace_action.sh workspace 2
bind = $mainMod,		3, exec, $scripts/workspace_action.sh workspace 3
bind = $mainMod,		4, exec, $scripts/workspace_action.sh workspace 4
bind = $mainMod,		5, exec, $scripts/workspace_action.sh workspace 5
bind = $mainMod,		6, exec, $scripts/workspace_action.sh workspace 6
bind = $mainMod,		7, exec, $scripts/workspace_action.sh workspace 7
bind = $mainMod,		8, exec, $scripts/workspace_action.sh workspace 8
bind = $mainMod,		9, exec, $scripts/workspace_action.sh workspace 9
bind = $mainMod,		0, exec, $scripts/workspace_action.sh workspace 10


##! Workspace management
# Move window to workspace $mainMod + Shift + [0-9]
#/# bind = $mainMod Alt, Hash,,	# Window: move to workspace	# (1, 2, 3, 4, ...)
bind = $mainMod Shift,	1, exec, $scripts/workspace_action.sh movetoworkspacesilent 1
bind = $mainMod Shift,	2, exec, $scripts/workspace_action.sh movetoworkspacesilent 2
bind = $mainMod Shift,	3, exec, $scripts/workspace_action.sh movetoworkspacesilent 3
bind = $mainMod Shift,	4, exec, $scripts/workspace_action.sh movetoworkspacesilent 4
bind = $mainMod Shift,	5, exec, $scripts/workspace_action.sh movetoworkspacesilent 5
bind = $mainMod Shift,	6, exec, $scripts/workspace_action.sh movetoworkspacesilent 6
bind = $mainMod Shift,	7, exec, $scripts/workspace_action.sh movetoworkspacesilent 7
bind = $mainMod Shift,	8, exec, $scripts/workspace_action.sh movetoworkspacesilent 8
bind = $mainMod Shift,	9, exec, $scripts/workspace_action.sh movetoworkspacesilent 9
bind = $mainMod Shift,	0, exec, $scripts/workspace_action.sh movetoworkspacesilent 10

binde	= $mainMod Shift,	right,	movetoworkspace,	m+1													# Open next workspace
binde	= $mainMod Shift,	left,	movetoworkspace,	m-1													# Open previous workspace
binde	= $mainMod Shift,	down,	movetoworkspace,	emptym												# Switch to empty workspace
binde	= $mainMod Shift,	up,		exec,				$scripts/move_window_to_monitor.sh movewindow	# Switch to monitor

binde	= $mainMod Shift,	l,		movetoworkspace,	m+1													# Open next workspace
binde	= $mainMod Shift,	h,		movetoworkspace,	m-1													# Open previous workspace
binde	= $mainMod Shift,	j,		movetoworkspace,	emptym												# Switch to empty workspace
binde	= $mainMod Shift,	k,		exec,				$scripts/move_window_to_monitor.sh movewindow	# Switch to monitor

##! Passthrough $mainMod KEY to Virtual Machine
bind	= $mainMod Alt, P, submap, passthru								# Passthrough $mainMod key to virtual machine
submap	= passthru
bind	= $mainMod, Escape, submap, reset								# Get $mainMod key back from virtual machine
submap	= reset

##! Fn keys
bindle	= , XF86MonBrightnessUp,	exec, brightnessctl -q s +5%								# Increase brightness by 5%
bindle	= , XF86MonBrightnessDown,	exec, brightnessctl -q s 5%-								# Reduce brightness by 5%
bindle	= , XF86AudioRaiseVolume,	exec, pactl set-sink-volume @DEFAULT_SINK@ +5%				# Increase volume by 5%
bindle	= , XF86AudioLowerVolume,	exec, pactl set-sink-volume @DEFAULT_SINK@ -5%				# Reduce volume by 5%
bindl	= , XF86AudioMute,			exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle			# Toggle mute
bindl	= , XF86AudioPlay,			exec, playerctl play-pause									# Audio play pause
bindl	= , XF86AudioPause,			exec, playerctl pause										# Audio pause
bindl	= , XF86AudioNext,			exec, playerctl next										# Audio next
bindl	= , XF86AudioPrev,			exec, playerctl previous									# Audio previous
bindl	= , XF86AudioMicMute,		exec, pactl set-source-mute @DEFAULT_SOURCE@ toggle			# Toggle microphone
bind	= , XF86Calculator,			exec, qalculate-gtk											# Open calculator
bind	= , XF86Lock,				exec, hyprlock												# Open screenlock
bind	= , XF86Tools,				exec, ags -r 'OpenSettings()'
bind	= , XF86PowerOff,			exec, sleep 1 && hyprctl dispatch dpms off $INTERNAL_DISPLAY
bind	= $mainMod, XF86PowerOff,	exec, sleep 1 && hyprctl dispatch dpms off

##! Widgets
bindr	= $mainMod,				R,						exec, killall agsv1 ydotool; agsv1 &																				# Restart widgets
bindr	= $mainMod Shift,		R,						exec, hyprctl reload; killall agsv1 ydotool; agsv1 &																# [hidden]
bind	= $mainMod Ctrl,		Slash,					exec, agsv1 run-js 'cycleMode();'																					# Cycle bar mode (normal, focus)
bindir	= $mainMod,				$mainMod_L,				exec, agsv1 -t 'overview'																							# Toggle overview/launcher
# bind	= $mainMod,				Tab,					exec, agsv1 -t 'overview'																							# [hidden]
bind	= $mainMod,				Slash,					exec, for ((i=0; i<$(hyprctl monitors -j | jq length); i++)); do agsv1 -t "cheatsheet""$i"; done					# Show cheatsheet
bind	= $mainMod Shift,		M,						exec, agsv1 run-js 'openMusicControls.value = (!mpris.getPlayer() ? false : !openMusicControls.value);'				# Toggle music controls
bind	= $mainMod,				Comma,					exec, agsv1 run-js 'openColorScheme.value = true; Utils.timeout(5000, () => openColorScheme.value = false);'		# View color scheme and options
bind	= $mainMod Ctrl,		semicolon,				exec, for ((i=0; i<$(hyprctl monitors -j | jq length); i++)); do agsv1 -t "osk""$i"; done							# Toggle on-screen keyboard
bind	= $mainMod,				M,						exec, for ((i=0; i<$(hyprctl monitors -j | jq length); i++)); do agsv1 -t "session""$i"; done						# Toggle power menu
bind	= $mainMod Ctrl,		G,						exec, for ((i=0; i<$(hyprctl monitors -j | jq length); i++)); do agsv1 -t "crosshair""$i"; done						# Toggle crosshair
bindle	= ,						XF86MonBrightnessUp,	exec, agsv1 run-js 'brightness.screen_value += 0.05; indicator.popup(1);'											# [hidden]
bindle	= ,						XF86MonBrightnessDown,	exec, agsv1 run-js 'brightness.screen_value -= 0.05; indicator.popup(1);'											# [hidden]
# bindl	= ,						XF86AudioMute,			exec, agsv1 run-js 'indicator.popup(1);'																			# [hidden]
bindl	= $mainMod Ctrl,		M,						exec, agsv1 run-js 'indicator.popup(1);'																			# [hidden]

bind = Ctrl Shift Alt, Delete, exec, pkill wlogout || wlogout -p layer-shell	# [hidden]

# # hyprexpo plugin
# bind = $mainMod,tab,hyprexpo:expo, toggle	# View all workspaces

# # trigger when the switch is toggled
# bindl=,switch:[Lid Switch],exec,hyprlock
# # trigger when the switch is turning on
# bindl=,switch:on:[Lid Switch],exec,hyprctl keyword monitor "eDP-1, disable"
# # trigger when the switch is turning off
# bindl=,switch:off:[Lid Switch],exec,hyprctl keyword monitor "eDP-1, 2560x1600, 0x0, 1"

# hyprtasking plugin

# bind = $mainMod, tab, hyprtasking:toggle, cursor
# bind = $mainMod, space, hyprtasking:toggle, all
#
# bind = $mainMod, X, hyprtasking:killhovered
#
# bind = $mainMod, H, hyprtasking:move, left
# bind = $mainMod, J, hyprtasking:move, down
# bind = $mainMod, K, hyprtasking:move, up
# bind = $mainMod, L, hyprtasking:move, right
#
# plugin {
#
#     hyprtasking {
#         layout = linear
#         gap_size = 20
#         bg_color = $overlay
#         border_size = 4
#         exit_behavior = active hovered interacted original
#
#         gaps {
#             rows = 3
#         }
#         linear {
#             height = 300
#         }
#     }
# }
